{
	"info": {
		"_postman_id": "f13b372e-8208-4bb1-8719-624d82482715",
		"name": "MyCollection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "TestStatus",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}",
					"host": [
						"{{URL}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "TestTitle",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.globals.set(\"title\", \".*?<title>Geo Citizen<\\/title>.*\");\r",
							"pm.collectionVariables.set(\"charset\", \"<meta charset=utf-8>\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 600ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"});\r",
							"\r",
							"pm.test(\"Test Name\",function(){\r",
							"const responseText = pm.response.text();\r",
							"const title = pm.globals.get(\"title\");\r",
							"const mathResult = responseText.search(title) != -1;\r",
							"console.log(responseText.search(title));\r",
							"pm.expect(mathResult).to.be.equal(true);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}",
					"host": [
						"{{URL}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "CurrentSession",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 600ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"});\r",
							"\r",
							"pm.test(\"User isn't logged in\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data[0].logged_in).to.eql(false);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/auth/getCurrentSession",
					"host": [
						"{{URL}}"
					],
					"path": [
						"auth",
						"getCurrentSession"
					]
				}
			},
			"response": []
		},
		{
			"name": "ErrorLogin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"User with current login doesn't exist\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.errors[0].errmsg).to.eql(\"User with current login doesn't exist\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{URL}}/auth/login?login=PlainU&password={{USER_PASS}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"auth",
						"login"
					],
					"query": [
						{
							"key": "login",
							"value": "PlainU"
						},
						{
							"key": "password",
							"value": "{{USER_PASS}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"User is logged in successfully\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data[0].login).to.eql(pm.environment.get('USER_LOGIN'));\r",
							"    pm.expect(jsonData.data[0].logged_in).to.eql(true);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "",
							"type": "string"
						},
						{
							"key": "username",
							"value": "",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{URL}}/auth/login?login={{USER_LOGIN}}&password={{USER_PASS}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"auth",
						"login"
					],
					"query": [
						{
							"key": "login",
							"value": "{{USER_LOGIN}}"
						},
						{
							"key": "password",
							"value": "{{USER_PASS}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"User isn't logged in\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data[0].logged_in).to.eql(false);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{URL}}/auth/logout",
					"host": [
						"{{URL}}"
					],
					"path": [
						"auth",
						"logout"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "charset",
			"value": ""
		}
	]
}